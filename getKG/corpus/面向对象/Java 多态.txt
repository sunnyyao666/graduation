<h2>Java多态</h2>
<p>多态是同一个行为具有多个不同表现形式或形态的能力。</p><p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-polymorphism-111.png" width="70%"/></p><p>多态性是对象多种表现形式的体现。</p><p>现实中，比如我们按下 F1 键这个动作：
</p><ul><li>
如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；</li><li>如果当前在 Word 下弹出的就是 Word 帮助；</li><li>在 Windows 下弹出的就是 Windows 帮助和支持。</li></ul><p>同一个事件发生在不同的对象上会产生不同的结果。</p><h3>
多态的优点
</h3><ul><li>
1. 消除类型之间的耦合关系</li><li>
2. 可替换性</li><li>
3. 可扩充性</li><li>
4. 接口性</li><li>
5. 灵活性</li><li>
6. 简化性</li></ul><h3>多态存在的三个必要条件</h3><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象：<span class="marked">Parent p = new Child();</span></li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/2DAC601E-70D8-4B3C-86CC-7E4972FC2466.jpg" width="70%"/></p><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</p><p>多态的好处：可以使程序有良好的扩展，并可以对所有类的对象进行通用处理。</p><hr/><h3>多态的实现方式</h3><h3>方式一：重写
</h3><h3>方式二：接口
</h3><ul><li><p>
1. 生活中的接口最具代表性的就是插座，例如一个三接头的插头都能接在三孔插座中，因为这个是每个国家都有各自规定的接口规则，有可能到国外就不行，那是因为国外自己定义的接口类型。</p></li><li><p>
2. java中的接口类似于生活中的接口，就是一些方法特征的集合，但没有方法的实现。</p></li></ul><h3>
方式三：抽象类和抽象方法
</h3>
*******
