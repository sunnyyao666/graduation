<h2>Java包(package)</h2>
<p>为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。</p><h3>包的作用</h3><ul><li><p>1、把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用。</p></li><li><p>
2、如同文件夹一样，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。
</p></li><li><p>3、包也限定了访问权限，拥有包访问权限的类才能访问某个包中的类。</p></li></ul><p>Java 使用包（package）这种机制是为了防止命名冲突，访问控制，提供搜索和定位类（class）、接口、枚举（enumerations）和注释（annotation）等。
</p><p>包语句的语法格式为：</p><pre><span class="hl-reserved">package</span><span class="hl-code"> </span><span class="hl-identifier">pkg1</span><span class="hl-brackets">[</span><span class="hl-code">．</span><span class="hl-identifier">pkg2</span><span class="hl-brackets">[</span><span class="hl-code">．</span><span class="hl-identifier">pkg3</span><span class="hl-code">…</span><span class="hl-brackets">]</span><span class="hl-brackets">]</span><span class="hl-code">;</span></pre><p>例如,一个Something.java 文件它的内容
</p><pre><span class="hl-reserved">package</span><span class="hl-code"> </span><span class="hl-identifier">net</span><span class="hl-code">.</span><span class="hl-identifier">java</span><span class="hl-code">.</span><span class="hl-identifier">util</span><span class="hl-code">;
</span><span class="hl-reserved">public</span><span class="hl-code"> </span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">Something</span><span class="hl-brackets">{</span><span class="hl-code">
   ...
</span><span class="hl-brackets">}</span></pre><p>那么它的路径应该是 <strong>net/java/util/Something.java</strong> 这样保存的。 package(包) 的作用是把不同的 java 程序分类保存，更方便的被其他 java 程序调用。</p><p>一个包（package）可以定义为一组相互联系的类型（类、接口、枚举和注释），为这些类型提供访问保护和命名空间管理的功能。</p><p>以下是一些 Java 中的包：</p><ul><li><strong>java.lang</strong>-打包基础的类</li><li>
<strong>java.io</strong>-包含输入输出功能的函数</li></ul><p>开发者可以自己把一组类和接口等打包，并定义自己的包。而且在实际开发中这样做是值得提倡的，当你自己完成类的实现之后，将相关的类分组，可以让其他的编程者更容易地确定哪些类、接口、枚举和注释等是相关的。
</p><p>由于包创建了新的命名空间（namespace），所以不会跟其他包中的任何名字产生命名冲突。使用包这种机制，更容易实现访问控制，并且让定位相关类更加简单。
</p><hr/><h3>创建包</h3><p>创建包的时候，你需要为这个包取一个合适的名字。之后，如果其他的一个源文件包含了这个包提供的类、接口、枚举或者注释类型的时候，都必须将这个包的声明放在这个源文件的开头。
</p><p>包声明应该在源文件的第一行，每个源文件只能有一个包声明，这个文件中的每个类型都应用于它。
</p><p>如果一个源文件中没有使用包声明，那么其中的类，函数，注释等将被放在一个无名的包（unnamed package）中。</p><hr/><h3>import 关键字</h3><p>为了能够使用某一个包的成员，我们需要在 Java 程序中明确导入该包。使用 "import" 语句可完成此功能。
</p><p>在 java 源文件中 import 语句应位于 package 语句之后，所有类的定义之前，可以没有，也可以有多条，其语法格式为：</p><pre><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">package1</span><span class="hl-brackets">[</span><span class="hl-code">.</span><span class="hl-identifier">package2</span><span class="hl-code">…</span><span class="hl-brackets">]</span><span class="hl-code">.</span><span class="hl-brackets">(</span><span class="hl-identifier">classname</span><span class="hl-code">|*</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre><p>如果在一个包中，一个类想要使用本包中的另一个类，那么该包名可以省略。
</p><p>
下面的 payroll 包已经包含了 Employee 类，接下来向 payroll 包中添加一个 Boss 类。Boss 类引用 Employee 类的时候可以不用使用 payroll 前缀，Boss 类的实例如下。
</p><pre><span class="hl-reserved">package</span><span class="hl-code"> </span><span class="hl-identifier">payroll</span><span class="hl-code">;
 
</span><span class="hl-reserved">public</span><span class="hl-code"> </span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">Boss</span><span class="hl-code">
</span><span class="hl-brackets">{</span><span class="hl-code">
   </span><span class="hl-reserved">public</span><span class="hl-code"> </span><span class="hl-types">void</span><span class="hl-code"> </span><span class="hl-identifier">payEmployee</span><span class="hl-brackets">(</span><span class="hl-identifier">Employee</span><span class="hl-code"> </span><span class="hl-identifier">e</span><span class="hl-brackets">)</span><span class="hl-code">
   </span><span class="hl-brackets">{</span><span class="hl-code">
      </span><span class="hl-identifier">e</span><span class="hl-code">.</span><span class="hl-identifier">mailCheck</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code">;
   </span><span class="hl-brackets">}</span><span class="hl-code">
</span><span class="hl-brackets">}</span></pre><p>如果 Boss 类不在 payroll 包中又会怎样？Boss 类必须使用下面几种方法之一来引用其他包中的类。
</p><p>使用类全名描述，例如：</p><pre><span class="hl-identifier">payroll</span><span class="hl-code">.</span><span class="hl-identifier">Employee</span></pre><p>用 <strong>import</strong> 关键字引入，使用通配符 <span class="marked">*</span>：</p><pre><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">payroll</span><span class="hl-code">.*;</span></pre><p>
使用 <strong>import</strong> 关键字引入 Employee 类：</p><pre><span class="hl-reserved">import</span><span class="hl-code"> </span><span class="hl-identifier">payroll</span><span class="hl-code">.</span><span class="hl-identifier">Employee</span><span class="hl-code">;</span></pre><p><strong>
注意：</strong>
</p><p>
类文件中可以包含任意数量的 import 声明。import 声明必须在包声明之后，类声明之前。
</p><hr/><h3>
package 的目录结构
</h3><p>
类放在包中会有两种主要的结果：</p><ul>
<li>包名成为类名的一部分，正如我们前面讨论的一样。</li>
<li>包名必须与相应的字节码所在的目录结构相吻合。</li>
</ul><p>下面是管理你自己 java 中文件的一种简单方式：</p><p>将类、接口等类型的源码放在一个文本中，这个文件的名字就是这个类型的名字，并以.java作为扩展名。例如：</p><pre><span class="hl-comment">//</span><span class="hl-comment"> 文件名 :  Car.java</span><span class="hl-comment"></span><span class="hl-code">
 
</span><span class="hl-reserved">package</span><span class="hl-code"> </span><span class="hl-identifier">vehicle</span><span class="hl-code">;
 
</span><span class="hl-reserved">public</span><span class="hl-code"> </span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">Car</span><span class="hl-code"> </span><span class="hl-brackets">{</span><span class="hl-code">
   </span><span class="hl-comment">//</span><span class="hl-comment"> 类实现  </span><span class="hl-comment"></span><span class="hl-code">
</span><span class="hl-brackets">}</span></pre><p>接下来，把源文件放在一个目录中，这个目录要对应类所在包的名字。</p><pre><span class="hl-code">....\</span><span class="hl-identifier">vehicle</span><span class="hl-code">\</span><span class="hl-identifier">Car</span><span class="hl-code">.</span><span class="hl-identifier">java</span></pre><p>现在，正确的类名和路径将会是如下样子：</p><ul class="list">
<li><p>类名 -&gt;  vehicle.Car</p></li>
<li><p>路径名 -&gt;   vehicle\Car.java (在 windows 系统中)</p></li>
</ul>
*******
