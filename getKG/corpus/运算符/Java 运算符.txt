<h2>算术运算符</h2>
<p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。</p><p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p><table class="reference">
<tbody>
<tr>
<th style="width:64px;">
			操作符</th>
<th style="width:273px;">
			描述</th>
<th style="width:111px;">
			例子</th>
</tr>
<tr>
<td style="width:64px;">
				+</td>
<td style="width:273px;">
				加法 - 相加运算符两侧的值</td>
<td style="width:111px;">
				A + B 等于 30</td>
</tr>
<tr>
<td style="width:64px;">
				-</td>
<td style="width:273px;">
				减法 - 左操作数减去右操作数</td>
<td style="width:111px;">
				A – B 等于 -10</td>
</tr>
<tr>
<td style="width:64px;">
				*</td>
<td style="width:273px;">
				乘法 - 相乘操作符两侧的值</td>
<td style="width:111px;">
				A * B等于200</td>
</tr>
<tr>
<td style="width:64px;">
				/</td>
<td style="width:273px;">
				除法 - 左操作数除以右操作数</td>
<td style="width:111px;">
				B / A等于2</td>
</tr>
<tr>
<td style="width:64px;">
				％</td>
<td style="width:273px;">
				取余 - 左操作数除以右操作数的余数</td>
<td style="width:111px;">
				B%A等于0</td>
</tr>
<tr>
<td style="width:64px;">
				++</td>
<td style="width:273px;">
				自增: 操作数的值增加1</td>
<td style="width:111px;">
				B++ 或 ++B 等于 21（区别详见下文）</td>
</tr>
<tr>
<td style="width:64px;">
				--</td>
<td style="width:273px;">
				自减: 操作数的值减少1</td>
<td style="width:111px;">
				B-- 或 --B 等于 19（区别详见下文）</td>
</tr>
</tbody>
</table><h3>自增自减运算符</h3><p><strong>1、自增（++）自减（--）运算符</strong>是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p><p><strong>2、前缀自增自减法(++a,--a): </strong>先进行自增或者自减运算，再进行表达式运算。</p><p><strong>3、后缀自增自减法(a++,a--): </strong>先进行表达式运算，再进行自增或者自减运算。</p><hr/>
*******
<h2>关系运算符</h2>
<p>下表为Java支持的关系运算符</p><p>表格中的实例整数变量A的值为10，变量B的值为20：</p><table class="reference">
<tbody>
<tr>
<th style="width:42px;">
				运算符</th>
<th style="width:407px;">
				描述</th>
<th style="width:128px;">
				例子</th>
</tr>
<tr>
<td style="width:42px;">
				==</td>
<td style="width:407px;">
				检查如果两个操作数的值是否相等，如果相等则条件为真。</td>
<td style="width:128px;">
				（A == B）为假。</td>
</tr>
<tr>
<td style="width:42px;">
				!=</td>
<td style="width:407px;">
				检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>
<td style="width:128px;">
				(A != B) 为真。</td>
</tr>
<tr>
<td style="width:42px;">
				&gt; </td>
<td style="width:407px;">
				检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>
<td style="width:128px;">
				（A&gt; B）为假。</td>
</tr>
<tr>
<td style="width:42px;">
				&lt; </td>
<td style="width:407px;">
				检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>
<td style="width:128px;">
				（A &lt;B）为真。</td>
</tr>
<tr>
<td style="width:42px;">
				&gt;=</td>
<td style="width:407px;">
				检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>
<td style="width:128px;">
				（A&gt; = B）为假。</td>
</tr>
<tr>
<td style="width:42px;">
				&lt;=</td>
<td style="width:407px;">
				检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>
<td style="width:128px;">
				（A &lt;= B）为真。</td>
</tr>
</tbody>
</table><hr/>
*******
<h2>
位运算符</h2>
<p>

Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。
</p><p>
位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：</p><pre>
A = 0011 1100
B = 0000 1101
-----------------
A&amp;B = 0000 1100
A | B = 0011 1101
A ^ B = 0011 0001
~A= 1100 0011
</pre><p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p><table class="reference">
<tbody>
<tr>
<th style="width:57px;">
				操作符</th>
<th style="width:372px;">
				描述</th>
<th style="width:148px;">
				例子</th>
</tr>
<tr>
<td style="width:57px;">
				＆</td>
<td style="width:372px;">
				如果相对应位都是1，则结果为1，否则为0</td>
<td style="width:148px;">
				（A＆B），得到12，即0000 1100</td>
</tr>
<tr>
<td style="width:57px;">
				|</td>
<td style="width:372px;">
				如果相对应位都是 0，则结果为 0，否则为 1</td>
<td style="width:148px;">
				（A | B）得到61，即 0011 1101</td>
</tr>
<tr>
<td style="width:57px;">
				^</td>
<td style="width:372px;">
				如果相对应位值相同，则结果为0，否则为1</td>
<td style="width:148px;">
				（A ^ B）得到49，即 0011 0001</td>
</tr>
<tr>
<td style="width:57px;">
				〜</td>
<td style="width:372px;">
				按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td>
<td style="width:148px;">
				（〜A）得到-61，即1100 0011</td>
</tr>
<tr>
<td style="width:57px;">
				&lt;&lt; </td>
<td style="width:372px;">
				按位左移运算符。左操作数按位左移右操作数指定的位数。</td>
<td style="width:148px;">
				A &lt;&lt; 2得到240，即 1111 0000</td>
</tr>
<tr>
<td style="width:57px;">
				&gt;&gt; </td>
<td style="width:372px;">
				按位右移运算符。左操作数按位右移右操作数指定的位数。</td>
<td style="width:148px;">
				A &gt;&gt; 2得到15即 1111</td>
</tr>
<tr>
<td style="width:57px;">
				&gt;&gt;&gt; </td>
<td style="width:372px;">
				按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>
<td style="width:148px;">
				A&gt;&gt;&gt;2得到15即0000 1111</td>
</tr>
</tbody>
</table><hr/>
*******
<h2>逻辑运算符</h2>
<p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p><table class="reference">
<tbody>
<tr>
<th style="width:37px;">
				操作符</th>
<th style="width:433px;">
				描述</th>
<th style="width:106px;">
				例子</th>
</tr>
<tr>
<td style="width:37px;">
				&amp;&amp;</td>
<td style="width:433px;">
				称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>
<td style="width:106px;">
				（A &amp;&amp; B）为假。</td>
</tr>
<tr>
<td style="width:37px;">
				| |</td>
<td style="width:433px;">
				称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td>
<td style="width:106px;">
				（A | | B）为真。</td>
</tr>
<tr>
<td style="width:37px;">
				！</td>
<td style="width:433px;">
				称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>
<td style="width:106px;">
				！（A &amp;&amp; B）为真。</td>
</tr>
</tbody>
</table><hr/><h3>短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p><hr/>
*******
<h2>赋值运算符</h2>
<p>

下面是Java语言支持的赋值运算符：</p><table class="reference">
<tbody>
<tr>
<th style="width:46px;">
				操作符</th>
<th style="width:376px;">
				描述</th>
<th style="width:154px;">
				例子</th>
</tr>
<tr>
<td style="width:46px;">
				=</td>
<td style="width:376px;">
				简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
<td style="width:154px;">
				C = A + B将把A + B得到的值赋给C</td>
</tr>
<tr>
<td style="width:46px;">
				+ =</td>
<td style="width:376px;">
				加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
<td style="width:154px;">
				C + = A等价于C = C + A</td>
</tr>
<tr>
<td style="width:46px;">
				- =</td>
<td style="width:376px;">
				减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
<td style="width:154px;">
				C - = A等价于C = C - A</td>
</tr>
<tr>
<td style="width:46px;">
				* =</td>
<td style="width:376px;">
				乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
<td style="width:154px;">
				C * = A等价于C = C * A</td>
</tr>
<tr>
<td style="width:46px;">
				/ =</td>
<td style="width:376px;">
				除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
<td style="width:154px;">
				C / = A，C 与 A 同类型时等价于 C = C / A</td>
</tr>
<tr>
<td style="width:46px;">
				（％）=</td>
<td style="width:376px;">
				取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
<td style="width:154px;">
				C％= A等价于C = C％A</td>
</tr>
<tr>
<td style="width:46px;">
				&lt;&lt; =</td>
<td style="width:376px;">
				左移位赋值运算符</td>
<td style="width:154px;">
				C &lt;&lt; = 2等价于C = C &lt;&lt; 2</td>
</tr>
<tr>
<td style="width:46px;">
				&gt;&gt; =</td>
<td style="width:376px;">
				右移位赋值运算符</td>
<td style="width:154px;">
				C &gt;&gt; = 2等价于C = C &gt;&gt; 2</td>
</tr>
<tr>
<td style="width:46px;">
				＆=</td>
<td style="width:376px;">
				按位与赋值运算符</td>
<td style="width:154px;">
				C＆= 2等价于C = C＆2</td>
</tr>
<tr>
<td style="width:46px;">
				^ =</td>
<td style="width:376px;">
				按位异或赋值操作符</td>
<td style="width:154px;">
				C ^ = 2等价于C = C ^ 2</td>
</tr>
<tr>
<td style="width:46px;">
				| =</td>
<td style="width:376px;">
				按位或赋值操作符</td>
<td style="width:154px;">
				C | = 2等价于C = C | 2</td>
</tr>
</tbody>
</table><hr/>
*******
<h2>条件运算符（?:）</h2>
<p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><pre>
variable x = (expression) ? value if true : value if false
</pre><hr/>
*******
<h2>Java运算符优先级</h2>
<p>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</p><p>例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。
</p><p>再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。
</p><p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p><table class="reference">
<tbody>
<tr>
<th style="width:66px;">
				类别 </th>
<th style="width:274px;">
				操作符</th>
<th style="width:132px;">
				关联性 </th>
</tr>
<tr>
<td style="width:66px;">
				后缀</td>
<td style="width:274px;">
				() [] . (点操作符)</td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				一元</td>
<td style="width:274px;">
				expr++  expr--</td>
<td style="width:132px;">
				从左到右</td>
</tr>
<tr>
<td style="width:66px;">
				一元</td>
<td style="width:274px;">
				++expr --expr + - ～ ！</td>
<td style="width:132px;">
				从右到左</td>
</tr>
<tr>
<td style="width:66px;">
				乘性 </td>
<td style="width:274px;">
				* /％</td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				加性 </td>
<td style="width:274px;">
				+ -</td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				移位 </td>
<td style="width:274px;">
				&gt;&gt; &gt;&gt;&gt;  &lt;&lt; </td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				关系 </td>
<td style="width:274px;">
				&gt;  &gt;=  &lt;  &lt;= </td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				相等 </td>
<td style="width:274px;">
				==  !=</td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				按位与</td>
<td style="width:274px;">
				＆</td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				按位异或</td>
<td style="width:274px;">
				^</td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				按位或</td>
<td style="width:274px;">
				|</td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				逻辑与</td>
<td style="width:274px;">
				&amp;&amp;</td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				逻辑或</td>
<td style="width:274px;">
				| |</td>
<td style="width:132px;">
				左到右</td>
</tr>
<tr>
<td style="width:66px;">
				条件</td>
<td style="width:274px;">
				？：</td>
<td style="width:132px;">
				从右到左</td>
</tr>
<tr>
<td style="width:66px;">
				赋值</td>
<td style="width:274px;">
				= + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td>
<td style="width:132px;">
				从右到左</td>
</tr>
<tr>
<td style="width:66px;">
				逗号</td>
<td style="width:274px;">
				，</td>
<td style="width:132px;">
				左到右</td>
</tr>
</tbody>
</table>
*******
