<h2>Java集合框架（Collection）</h2>
<p>
集合框架被设计成要满足以下几个目标。</p><ul>
<li>
<p>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</p></li>
<li>
<p>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</p></li>
<li>
<p>对一个集合的扩展和适应必须是简单的。</p></li>
</ul><p>
为此，整个集合框架就围绕一组标准接口而设计。你可以直接使用这些接口的标准实现，诸如： <strong>LinkedList</strong>, <strong>HashSet</strong>, 和 <strong>TreeSet</strong> 等,除此之外你也可以通过这些接口实现自己的集合。</p><p><img src="//www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif"/></p><p>从上面的集合框架图可以看到，Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap 等等。</p><p>
集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p><ul>
<li>
<strong><p>接口：</p></strong>是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</li>
<li>
<p><strong>实现（类）：</strong>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</p></li>
<li>
<p><strong>算法：</strong>是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</p></li>
</ul><p>
除了集合，该框架也定义了几个 Map 接口和类。Map 里存储的是键/值对。尽管 Map 不是集合，但是它们完全整合在集合中。</p><h3>集合框架体系如图所示</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/java-coll-2020-11-16.png"/></p><p>Java 集合框架提供了一套性能优良，使用方便的接口和类，java集合框架位于java.util包中， 所以当使用集合框架的时候需要进行导包。</p><hr/><h3>集合接口</h3><p>
集合框架定义了一些接口。</p><table class="reference">
<tbody>
<tr>
<th width="10%">序号</th>
<th>接口描述</th>
</tr>
<tr>
<td>1</td>
<td>Collection 接口<br/><p>
Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。</p>
<p>Collection 接口存储一组不唯一，无序的对象。</p>
</td>
</tr>
<tr>
<td>2</td>
<td> List 接口<br/><p>
List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。</p>
<p>List 接口存储一组不唯一，有序（插入顺序）的对象。</p>
</td>
</tr>
<tr>
<td>3</td>
<td> Set<br/>
<p>
Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。</p>
<p>Set 接口存储一组唯一，无序的对象。</p>
</td>
</tr>
<tr>
<td>4</td>
<td> SortedSet <br/>

继承于Set保存有序的集合。</td>
</tr>
<tr>
<td>5</td>
<td> Map<br/>
<p>Map 接口存储一组键值对象，提供key（键）到value（值）的映射。</p>
</td>
</tr>
<tr>
<td>6</td>
<td> Map.Entry <br/>

描述在一个Map中的一个元素（键/值对）。是一个 Map 的内部接口。</td>
</tr>
<tr>
<td>7</td>
<td> SortedMap<br/>

继承于 Map，使 Key 保持在升序排列。</td>
</tr>
<tr>
<td>8</td>
<td> Enumeration<br/>

这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。</td>
</tr>
</tbody>
</table><h3>Set和List的区别</h3><ul>
<li>
<p>
1. Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。</p></li><li><p>
2. Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 <strong>&lt;实现类有HashSet,TreeSet&gt;</strong>。</p></li><li><p>
3. List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 <strong>&lt;实现类有ArrayList,LinkedList,Vector&gt;</strong> 。</p></li></ul><hr/><h3>总结
</h3><p>
Java集合框架为程序员提供了预先包装的数据结构和算法来操纵他们。</p><p>
集合是一个对象，可容纳其他对象的引用。集合接口声明对每一种类型的集合可以执行的操作。</p><p>
集合框架的类和接口均在java.util包中。</p>
*******
