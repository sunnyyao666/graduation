内置数据类型
<p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。 </p><p><strong>byte：</strong></p><ul>
<li>
		byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li>
<li>
		最小值是 <span class="marked">-128（-2^7）</span>；</li>
<li>
		最大值是 <span class="marked">127（2^7-1）</span>；</li>
<li>
		默认值是 <span class="marked">0</span>；</li>
<li>
		byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li>
<li>
		例子：byte a = 100，byte b = -50。</li>
</ul><p><strong>short：</strong></p><ul>
<li>
		short 数据类型是 16 位、有符号的以二进制补码表示的整数</li>
<li>
		最小值是 <span class="marked">-32768（-2^15）</span>；</li>
<li>
		最大值是 <span class="marked">32767（2^15 - 1）</span>；</li>
<li>
		Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li>
<li>
		默认值是 <span class="marked">0</span>；</li>
<li>
		例子：short s = 1000，short r = -20000。</li>
</ul><p><strong>int：</strong></p><ul>
<li>
		int 数据类型是32位、有符号的以二进制补码表示的整数；</li>
<li>
		最小值是 <span class="marked">-2,147,483,648（-2^31）</span>；</li>
<li>
		最大值是 <span class="marked">2,147,483,647（2^31 - 1）</span>；</li>
<li>
		一般地整型变量默认为 int 类型；</li>
<li>
		默认值是 <span class="marked">0</span> ；</li>
<li>
		例子：int a = 100000, int b = -200000。</li>
</ul><p><strong>long：</strong></p><ul>
<li>
		long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li>
<li>
		最小值是 <span class="marked">-9,223,372,036,854,775,808（-2^63）</span>；</li>
<li>
		最大值是 <span class="marked">9,223,372,036,854,775,807（2^63 -1）</span>；</li>
<li>
		这种类型主要使用在需要比较大整数的系统上；</li>
<li>
		默认值是 <span class="marked">0L</span>；</li>
<li>
		例子： long a = 100000L，Long b = -200000L。<br/>
"L"理论上不分大小写，但是若写成"l"容易与数字"1"混淆，不容易分辩。所以最好大写。
</li>
</ul><p><strong>float：</strong></p><ul>
<li>
		float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li>
<li>
		float 在储存大型浮点数组的时候可节省内存空间；</li>
<li>
		默认值是 <span class="marked">0.0f</span>；</li>
<li>
		浮点数不能用来表示精确的值，如货币；</li>
<li>
		例子：float f1 = 234.5f。</li>
</ul><p><strong>double：</strong></p><ul>
<li>
		double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数；</li>
<li>
		浮点数的默认类型为 double 类型；</li>
<li>
		double类型同样不能表示精确的值，如货币；</li>
<li>
		默认值是 <span class="marked">0.0d</span>；</li>
<li>
<p>例子：</p>
<pre>double   d1  = 7D ;
double   d2  = 7.; 
double   d3  =  8.0; 
double   d4  =  8.D; 
double   d5  =  12.9867; </pre>
<p>7 是一个 int 字面量，而 7D，7. 和 8.0 是 double 字面量。</p>
</li>
</ul><p><strong>boolean：</strong></p><ul>
<li>
		boolean数据类型表示一位的信息；</li>
<li>
		只有两个取值：true 和 false；</li>
<li>
		这种类型只作为一种标志来记录 true/false 情况；</li>
<li>
		默认值是 <span class="marked">false</span>；</li>
<li>
		例子：boolean one = true。</li>
</ul><p><strong>char：</strong></p><ul>
<li>
		char 类型是一个单一的 16 位 Unicode 字符；</li>
<li>
		最小值是 <span class="marked">\u0000</span>（十进制等效值为 0）；</li>
<li>
		最大值是 <span class="marked">\uffff</span>（即为 65535）；</li>
<li>
		char 数据类型可以储存任何字符；</li>
<li>
		例子：char letter = 'A';。</li>
</ul><h3>类型默认值</h3><p>
下表列出了 Java 各个类型的默认值：</p><table class="reference">
<tbody>
<tr>
<th align="left"><strong>数据类型</strong></th>
<th align="left"><strong>默认值</strong></th>
</tr>
<tr>
<td headers="h1">byte</td>
<td headers="h2">0</td>
</tr>
<tr>
<td headers="h1">short</td>
<td headers="h2">0</td>
</tr>
<tr>
<td headers="h1">int</td>
<td headers="h2">0</td>
</tr>
<tr>
<td headers="h1">long</td>
<td headers="h2">0L</td>
</tr>
<tr>
<td headers="h1">float</td>
<td headers="h2">0.0f</td>
</tr>
<tr>
<td headers="h1">double</td>
<td headers="h2">0.0d</td>
</tr>
<tr>
<td headers="h1">char</td>
<td headers="h2">'u0000'</td>
</tr>
<tr>
<td headers="h1">String (or any object)</td>
<td headers="h2">null</td>
</tr>
<tr>
<td headers="h1">boolean</td>
<td headers="h2">false</td>
</tr>
</tbody>
</table><hr/>
*******
引用类型
<ul>
<li>
		在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li>
<li>
		对象、数组都是引用数据类型。</li>
<li>
		所有引用类型的默认值都是null。</li>
<li>
		一个引用变量可以用来引用任何与之兼容的类型。</li>
<li>
		例子：Site site = new Site("JavaKG")。</li>
</ul><hr/>
*******
Java常量
<p>常量在程序运行时是不能被修改的。</p><p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p><pre>
final double PI = 3.1415927;
</pre><p>
虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。
</p><p>字面量可以赋给任何内置类型的变量。例如：</p><pre>
byte a = 68;
char a = 'A'
</pre><p>byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。</p><p>当使用字面量的时候，前缀 <span class="marked">0</span> 表示 8 进制，而前缀 <span class="marked">0x</span> 代表 16 进制, 例如：</p><pre>
int decimal = 100;
int octal = 0144;
int hexa =  0x64;
</pre><p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p><pre>
"Hello World"
"two\nlines"
"\"This is in quotes\""
</pre><p>字符串常量和字符变量都可以包含任何 Unicode 字符。例如：</p><pre>
char a = '\u0001';
String a = "\u0001";
</pre><p>
Java语言支持一些特殊的转义字符序列。</p><table class="reference">
<tbody>
<tr>
<th>
				符号</th>
<th>
				字符含义</th>
</tr>
<tr>
<td>
				\n</td>
<td>
				换行 (0x0a)</td>
</tr>
<tr>
<td>
				\r</td>
<td>
				回车 (0x0d)</td>
</tr>
<tr>
<td>
				\f</td>
<td>
				换页符(0x0c)</td>
</tr>
<tr>
<td>
				\b</td>
<td>
				退格 (0x08)</td>
</tr>
<tr>
<td>
				\0</td>
<td>
				空字符 (0x0)</td>
</tr>
<tr>
<td>
				\s</td>
<td>
				空格 (0x20)</td>
</tr>
<tr>
<td>
				\t</td>
<td>
				制表符</td>
</tr>
<tr>
<td>
				\"</td>
<td>
				双引号</td>
</tr>
<tr>
<td>
				\'</td>
<td>
				单引号</td>
</tr>
<tr>
<td>
				\\</td>
<td>
				反斜杠</td>
</tr>
<tr>
<td>
				\ddd</td>
<td>
				八进制字符 (ddd)</td>
</tr>
<tr>
<td>
				\uxxxx</td>
<td>
				16进制Unicode字符 (xxxx)</td>
</tr>
</tbody>
</table><hr/>
*******
自动类型转换
<p><b>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</b></p><p>转换从低级到高级。</p><pre>
低  ------------------------------------&gt;  高

byte,short,char—&gt; int —&gt; long—&gt; float —&gt; double 
</pre><p>数据类型转换必须满足如下规则：</p><ul>
<li><p>1. 不能对boolean类型进行类型转换。</p> </li><li>
<p>2. 不能把对象类型转换成不相关类的对象。</p> </li><li>
<p>3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p> </li><li>
<p>4. 转换过程中可能导致溢出或损失精度，例如：</p>
<pre>
int i =128;   
byte b = (byte)i;
</pre>
<p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p>
</li>
<li>
<p>5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：  </p>
<pre>
(int)23.7 == 23;        
(int)-45.89f == -45
</pre>
</li>
</ul><h3>强制类型转换</h3><ul><li><p>
1. 条件是转换的数据类型必须是兼容的。</p></li><li><p>
2. 格式：(type)value  type是要强制类型转换后的数据类型</p>




</li></ul><h3>隐含强制类型转换</h3><ul>
<li><p>
1、 整数的默认类型是 int。</p></li>
<li><p>
2. 小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f。
</p></li>
</ul>
*******
