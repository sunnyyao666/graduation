Java方法
<p>Java方法是语句的集合，它们在一起执行一个功能。</p><ul>
<li>方法是解决一类问题的步骤的有序组合</li>
<li>方法包含于类或对象中</li>
<li>方法在程序中被创建，在其他地方被引用</li>
</ul><h3>方法的优点</h3><ul><li>
1. 使程序变得更简短而清晰。</li><li>
2. 有利于程序维护。</li><li>  
3. 可以提高程序开发的效率。</li><li>  
4. 提高了代码的重用性。</li></ul><h3>方法的命名规则
</h3><ul><li>
1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：<span class="marked">addPerson</span>。</li><li>
2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<span class="marked">test&lt;MethodUnderTest&gt;_&lt;state&gt;</span>，例如 <span class="marked">testPop_emptyStack</span>。 </li></ul><hr/><h3>方法的定义</h3><p>一般情况下，定义一个方法包含以下语法：</p><pre><span class="hl-code">修饰符 返回值类型 方法名</span><span class="hl-brackets">(</span><span class="hl-code">参数类型 参数名</span><span class="hl-brackets">)</span><span class="hl-brackets">{</span><span class="hl-code">
    ...
    方法体
    ...
    </span><span class="hl-reserved">return</span><span class="hl-code"> 返回值;
</span><span class="hl-brackets">}</span></pre><p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p><ul>
<li><strong>修饰符：</strong>修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li>
<li><strong>返回值类型 ：</strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字<strong>void</strong>。</li>
<li><strong>方法名：</strong>是方法的实际名称。方法名和参数表共同构成方法签名。</li>
<li><strong>参数类型：</strong>参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li>
<li><strong>方法体：</strong>方法体包含具体的语句，定义该方法的功能。</li>
</ul><p>
<img src="https://www.runoob.com/wp-content/uploads/2013/12/D53C92B3-9643-4871-8A72-33D491299653.jpg"/>
</p><p>如：</p><pre><span class="hl-reserved">public</span><span class="hl-code"> </span><span class="hl-types">static</span><span class="hl-code"> </span><span class="hl-types">int</span><span class="hl-code"> </span><span class="hl-identifier">age</span><span class="hl-brackets">(</span><span class="hl-types">int</span><span class="hl-code"> </span><span class="hl-identifier">birthday</span><span class="hl-brackets">)</span><span class="hl-brackets">{</span><span class="hl-code">...</span><span class="hl-brackets">}</span></pre><p>
参数可以有多个：
</p><pre><span class="hl-types">static</span><span class="hl-code"> </span><span class="hl-types">float</span><span class="hl-code"> </span><span class="hl-identifier">interest</span><span class="hl-brackets">(</span><span class="hl-types">float</span><span class="hl-code"> </span><span class="hl-identifier">principal</span><span class="hl-code">, </span><span class="hl-types">int</span><span class="hl-code"> </span><span class="hl-identifier">year</span><span class="hl-brackets">)</span><span class="hl-brackets">{</span><span class="hl-code">...</span><span class="hl-brackets">}</span></pre><p>
<strong>注意：</strong> 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。
</p><hr/><h3>方法调用
</h3><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。
</p><p>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。
</p><p>当方法返回一个值的时候，方法调用通常被当做一个值。例如：
</p><pre><span class="hl-types">int</span><span class="hl-code"> </span><span class="hl-identifier">larger</span><span class="hl-code"> = </span><span class="hl-identifier">max</span><span class="hl-brackets">(</span><span class="hl-number">30</span><span class="hl-code">, </span><span class="hl-number">40</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre><p>如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：
</p><pre><span class="hl-identifier">System</span><span class="hl-code">.</span><span class="hl-identifier">out</span><span class="hl-code">.</span><span class="hl-identifier">println</span><span class="hl-brackets">(</span><span class="hl-quotes">"</span><span class="hl-string">欢迎访问JavaKG！</span><span class="hl-quotes">"</span><span class="hl-brackets">)</span><span class="hl-code">;</span></pre><hr/><h3>变量作用域</h3><p>
变量的范围是程序中该变量可以被引用的部分。
</p><p>方法内定义的变量被称为局部变量。
</p><p>局部变量的作用范围从声明开始，直到包含它的块结束。
</p><p>局部变量必须声明才可以使用。
</p><p>方法的参数范围涵盖整个方法。参数实际上是一个局部变量。
</p><p>for循环的初始化部分声明的变量，其作用范围在整个循环。
</p><p>但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：
</p><p>
<img src="//www.runoob.com/wp-content/uploads/2013/12/12-130Q1221013F0.jpg"/>
</p><p>你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。
</p><hr/>
*******
main方法
<p>main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。
</p><p>main 方法的头部是不变的，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。
</p><p>
有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。
</p><p>命令行参数是在执行程序时候紧跟在程序名字后面的信息。</p><hr/>
*******
构造方法
<p>
当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。
</p><p>通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。
</p><p>不管你是否自定义构造方法，所有的类都有构造方法，因为 Java 自动提供了一个默认构造方法，默认构造方法的访问修饰符和类的访问修饰符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。
</p><p>一旦你定义了自己的构造方法，默认构造方法就会失效。
</p><p>
下面是一个使用构造方法的例子：
</p><pre><span class="hl-comment">//</span><span class="hl-comment"> 一个简单的构造函数</span><span class="hl-comment"></span><span class="hl-code">
</span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">MyClass</span><span class="hl-code"> </span><span class="hl-brackets">{</span><span class="hl-code">
  </span><span class="hl-types">int</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code">;
 
  </span><span class="hl-comment">//</span><span class="hl-comment"> 以下是构造函数</span><span class="hl-comment"></span><span class="hl-code">
  </span><span class="hl-identifier">MyClass</span><span class="hl-brackets">(</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-brackets">{</span><span class="hl-code">
    </span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-number">10</span><span class="hl-code">;
  </span><span class="hl-brackets">}</span><span class="hl-code">
</span><span class="hl-brackets">}</span></pre><p>大多时候需要一个有参数的构造方法。
</p><p>下面是一个使用构造方法的例子：</p><pre><span class="hl-comment">//</span><span class="hl-comment"> 一个简单的构造函数</span><span class="hl-comment"></span><span class="hl-code">
</span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">MyClass</span><span class="hl-code"> </span><span class="hl-brackets">{</span><span class="hl-code">
  </span><span class="hl-types">int</span><span class="hl-code"> </span><span class="hl-identifier">x</span><span class="hl-code">;
 
  </span><span class="hl-comment">//</span><span class="hl-comment"> 以下是构造函数</span><span class="hl-comment"></span><span class="hl-code">
  </span><span class="hl-identifier">MyClass</span><span class="hl-brackets">(</span><span class="hl-types">int</span><span class="hl-code"> </span><span class="hl-identifier">i</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-brackets">{</span><span class="hl-code">
    </span><span class="hl-identifier">x</span><span class="hl-code"> = </span><span class="hl-identifier">i</span><span class="hl-code">;
  </span><span class="hl-brackets">}</span><span class="hl-code">
</span><span class="hl-brackets">}</span></pre><p>你可以像下面这样调用构造方法来初始化一个对象：</p><pre><span class="hl-reserved">public</span><span class="hl-code"> </span><span class="hl-reserved">class</span><span class="hl-code"> </span><span class="hl-identifier">ConsDemo</span><span class="hl-code"> </span><span class="hl-brackets">{</span><span class="hl-code">
  </span><span class="hl-reserved">public</span><span class="hl-code"> </span><span class="hl-types">static</span><span class="hl-code"> </span><span class="hl-types">void</span><span class="hl-code"> </span><span class="hl-identifier">main</span><span class="hl-brackets">(</span><span class="hl-identifier">String</span><span class="hl-brackets">[</span><span class="hl-brackets">]</span><span class="hl-code"> </span><span class="hl-identifier">args</span><span class="hl-brackets">)</span><span class="hl-code"> </span><span class="hl-brackets">{</span><span class="hl-code">
    </span><span class="hl-identifier">MyClass</span><span class="hl-code"> </span><span class="hl-identifier">t1</span><span class="hl-code"> = </span><span class="hl-reserved">new</span><span class="hl-code"> </span><span class="hl-identifier">MyClass</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-number">10</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-identifier">MyClass</span><span class="hl-code"> </span><span class="hl-identifier">t2</span><span class="hl-code"> = </span><span class="hl-reserved">new</span><span class="hl-code"> </span><span class="hl-identifier">MyClass</span><span class="hl-brackets">(</span><span class="hl-code"> </span><span class="hl-number">20</span><span class="hl-code"> </span><span class="hl-brackets">)</span><span class="hl-code">;
    </span><span class="hl-identifier">System</span><span class="hl-code">.</span><span class="hl-identifier">out</span><span class="hl-code">.</span><span class="hl-identifier">println</span><span class="hl-brackets">(</span><span class="hl-identifier">t1</span><span class="hl-code">.</span><span class="hl-identifier">x</span><span class="hl-code"> + </span><span class="hl-quotes">"</span><span class="hl-string"> </span><span class="hl-quotes">"</span><span class="hl-code"> + </span><span class="hl-identifier">t2</span><span class="hl-code">.</span><span class="hl-identifier">x</span><span class="hl-brackets">)</span><span class="hl-code">;
  </span><span class="hl-brackets">}</span><span class="hl-code">
</span><span class="hl-brackets">}</span></pre><p>运行结果如下：</p><pre>
10 20
</pre>
*******
